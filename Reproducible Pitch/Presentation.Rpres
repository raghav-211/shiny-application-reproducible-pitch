<style>
body {
    overflow: scroll;
}

.small-code pre code {
  font-size: 1em;
}

</style>

SBERBANK Opendata plotter- Reproducible Pitch
========================================================
author: Raghavendra Dabral
date: 22 November 2022
autosize: True

Overview
========================================================

This presentation was prepared for the **Coursera JHU Data Science Course Project: Shiny Application and Reproducible Pitch**

The shiny app is deployed: https://raghav-211.shinyapps.io/shiny-app-coursera/

The code is available at: https://github.com/raghav-211/shiny-application-reproducible-pitch

Depending on the area and the product in Russia, Sberbank holds somewhere between 40% and 90% of the financial services industry. 140 million private and 1.5 million business users' data are analysed.
Big Data from Sberbank contains details about some of the nation's economic processes. These statistics are available at [Opendata Sberbank](http://www.sberbank.com/ru/opendata) and the [official English website.](http://www.sberbank.com)

Available data
========================================================

* Revenue of legal entities by sectors and geographical areas
* The average household income, including salaries, pensions, grants, and allowances
* Inclination towards preservation and consumption
* Different regions' crediting levels
* Population mobility both domestically and abroad
* The proportion of costs for transportation, food, housing, and other expenses

***
The app has several inputs to manipulate the data and plot. A user can select a measurement, region and period. 

![Main screenshot](Presentation-figure/sample.png)

How it works
========================================================

To manipulate the data and plot it, the app has a number of inputs. The user can choose a measurement, a region, and a time frame.
* Select a region
* Select a variable (information about partial economic processes)
* Select a time period:
  + Date range - specifies the begining date and end dates of showing data.
  + Years - a slider that specifies the years of showing data.
  + From the year begin - a slider that specifies from the begin of which year to show the data.
  + Finally, All the time - showing the data for all the time.

The user also could select an approximation model for the showing data:
* Auto - the plot generates an approximation curve automatically
* Linear model - the plot generates Linear approximation model curve
* Poly model - the plot generates polynom model curve for the presented data

The ui.R code
========================================================
class: small-code

This is the code for the UI of the application. It is rather simple and easy to access.


```{r ui.R-code, echo = TRUE, eval = FALSE}

library(shiny)


shinyUI(fluidPage(
  
  # Application title
  titlePanel("Shiny Application and Reproducible Pitch - Sberbank Open Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      uiOutput("region"),
      uiOutput("rname"),
      
      radioButtons("period", "Choose a time period:", 
                   c("Date range"="mon",
                     "Years" = "year",
                     "From the year begin" = "yearbegin",
                     "All the time" = "all"),
                   selected = "all"),
      uiOutput("slider1"),
      uiOutput("slider2"),
      uiOutput("dates"),
      checkboxGroupInput("chkGroup", label = h3("Geom smooth"), 
                         choices = list("Auto" = 1, "Linear model" = 2, "Poly Model" = 3),
                         selected = 1)
    ),
    
                   
    # Show a plot of the generated distribution
    mainPanel(
      h3(textOutput("text1")),
      plotlyOutput("distPlot")
    )
  ),
  
  hr(),
  
  fluidRow(
    column(4, h3("Sberbank Open Data plotting tool using Shiny"), h5("by Raghavendra Dabral")),
    column(6, 
          h3("Synopsis"),
          p("This app was created to showcase a shiny application for the Coursera JHU Data Science Specialization.
            The server code along with the UI code is available in my ", a("GitHub repository.", href = "https://github.com/raghav-211/shiny-application-reproducible-pitch")),
          p("Depending on the area and the product in Russia, Sberbank holds somewhere between 40% and 90% of the financial services industry. 140 million private and 1.5 million business users' data are analysed."),
          p("Big Data from Sberbank contains details about some of the nation's economic processes. These statistics are available
            at ", a("Opendata Sberbank", href = "http://www.sberbank.com/ru/opendata"), (" and the "), a("official English website.", href="http://www.sberbank.com") ),
          h3("Instructions and User Guide"),
          p("To manipulate the data and plot it, the app has a number of inputs. The user can choose a measurement, a region, and a time frame."),
          HTML("<ol>
                <li>Select a region</li>
                <li>Select a variable</li>
                <li>Select a time period:</li>
                <ul>
                  <li>Date range - specifies the begining date and end dates of showing data</li>
                  <li>Years - a slider that specifies the years of showing data</li>
                  <li>From the year begin - a slider that specifies from the begin of which year to show the data</li>
                  <li>Finally, All the time - showing the data for all the time</li>
                </ul>
               </ol>"),
          
          p("Additionally, the user could choose an approximation model for the data:"),
          HTML("<ul>
                  <li>Auto - the plot generates an approximation curve automatically</li>
                  <li>Linear model - the plot generates Linear approximation model curve</li>
                  <li>Poly model - the plot generates polynom model curve for the presented data</li>
                </ul>")
          )
           
  )
  
)
)

```


The server.R code
========================================================
class: small-code

The server.R code for the application is given. We use 3 different types of plots and all user
choices are coded here.

```{r server.R-code, echo = TRUE, eval = FALSE}

library(shiny)
library(plotly)
library(lubridate)


shinyServer(
  
  function(input, output) {

  data <- read.csv("opendata.csv", sep = ',', quote = '"', dec = '.', stringsAsFactors = FALSE)
  data$date <- as.Date(data$date, "%Y-%m-%d")
  
  output$region <- renderUI({
    selectInput("region", "Choose a region:", as.list(unique(data$region)), selected = levels(data$region)[60] ) 
  })
  
  output$rname <- renderUI({
    selectInput("rname", "Choose a variable:", as.list(unique(data$name)), selected = levels(data$name)[1]) 
  })  
  
  output$text1 <- renderText({
    paste("You have chosen: ", input$rname, " in ", input$region)
  })
  
  # output$value <- renderPrint({ input$slider })
  
  output$slider1 <- renderUI({
    if (input$period == "yearbegin"){
      sliderInput("slider1", label = "From year", min = 2013, max = 2017, value = 2016, sep = "")
    }
  })
  
  output$slider2 <- renderUI({
      if (input$period == "year"){
      sliderInput("slider2", label = "Years range", min = 2013, max = 2017, value = c(2015,2016), sep = "")
    }
  })
  
  output$dates <- renderUI({
    if (input$period == "mon"){
      dateRangeInput("dates", label = "Date range", start = "2013-01-01", end = "2017-04-14", 
                     min = "2013-01-01", max = "2017-04-14")
    }
  })
  
  output$distPlot <- renderPlotly({
    if (input$period == "all")
    {
      dt <- data[data$region == input$region & data$name == input$rname, ]
    }
    if (input$period == "yearbegin")
    {
      sl <- input$slider1
      year <- as.character(sl)
      d <- as.Date(paste(year,"-01-01", sep=""))
      
      dt <- data[data$region == input$region & data$name == input$rname & data$date >= d, ]
    }
    if (input$period == "year")
    {
      # d <- as.Date('2017-04-14')
      # d <- d %m+% years(-1)
      sl <- input$slider2
      year1 <- as.character(sl[1])
      year2 <- as.character(sl[2])
      d1 <- as.Date(paste(year1,"-01-01",sep=""))
      d2 <- as.Date(paste(year2,"-01-01",sep=""))
      
      dt <- data[data$region == input$region & data$name == input$rname & data$date >= d1 & data$date <= d2, ]
    }
    if (input$period == "mon")
    {
      # d <- as.Date('2017-04-14')
      # d <- d %m+% months(-1)
      d1 <- as.Date(input$dates[1])
      d2 <- as.Date(input$dates[2])
      dt <- data[data$region == input$region & data$name == input$rname & data$date >= d1, ]
    }
    
    #plot_ly(x=~date, y=~value, data=dt, type = 'scatter', mode = 'lines')
    p <- ggplot(data = dt, aes(x=date, y=value)) + geom_line()

    if ("1" %in% input$chkGroup)
      p <- p + geom_smooth(method = "loess", aes(color="Auto Model"))
    if ("2" %in% input$chkGroup)
      p <- p + geom_smooth(method = "glm", aes(color="Linear Model"), formula = y~x)
    if ("3" %in% input$chkGroup)
      p <- p + geom_smooth(method = "glm", aes(color="Poly Model"), formula= (y ~ poly(x,2)), linetype = 1)
                           
    p <- ggplotly(p)
  })
  
})

```
